# Copyright (C) 2022 Opera Norway AS. All rights reserved.
#
# This file is an original work developed by Opera.

import("//build/config/sanitizers/sanitizers.gni")

assert(is_win || is_mac)

declare_args() {
  # Enable this to switch to select implementation of polling.
  # wepoll seems to be broken for some users causing crashes so let's
  # disable it for now.
  # NOTE(wmaslowski): this is an internal switch
  #      - only use within this module.
  # TODO(amlynarczyk): Make it work with mac too?
  zmq_use_select = is_win
}

config("libzmq_config_private") {
  cflags = [
    "-Wno-extra-semi",
    "-Wno-implicit-fallthrough",
    "-Wno-shadow",
    "-Wno-sign-compare",
    "-Wno-inconsistent-missing-override",
    "-Wno-unused-private-field",
  ]
}

config("libzmq_config_public") {
  defines = []
  if (is_win) {
    defines += [ "ZMQ_STATIC" ]
  }

  if (zmq_use_select) {
    defines += [ "ZMQ_PLATFORM_USE_SELECT" ]
  }
}

static_library("libzmq") {
  sources = [
    "vendor/include/zmq.h",
    "vendor/src/address.cpp",
    "vendor/src/address.hpp",
    "vendor/src/array.hpp",
    "vendor/src/atomic_counter.hpp",
    "vendor/src/atomic_ptr.hpp",
    "vendor/src/blob.hpp",
    "vendor/src/channel.cpp",
    "vendor/src/channel.hpp",
    "vendor/src/client.cpp",
    "vendor/src/client.hpp",
    "vendor/src/clock.cpp",
    "vendor/src/clock.hpp",
    "vendor/src/command.hpp",
    "vendor/src/compat.hpp",
    "vendor/src/condition_variable.hpp",
    "vendor/src/config.hpp",
    "vendor/src/ctx.cpp",
    "vendor/src/ctx.hpp",
    "vendor/src/curve_client.cpp",
    "vendor/src/curve_client.hpp",
    "vendor/src/curve_client_tools.hpp",
    "vendor/src/curve_mechanism_base.cpp",
    "vendor/src/curve_mechanism_base.hpp",
    "vendor/src/curve_server.cpp",
    "vendor/src/curve_server.hpp",
    "vendor/src/dbuffer.hpp",
    "vendor/src/dealer.cpp",
    "vendor/src/dealer.hpp",
    "vendor/src/decoder.hpp",
    "vendor/src/decoder_allocators.cpp",
    "vendor/src/decoder_allocators.hpp",
    "vendor/src/devpoll.cpp",
    "vendor/src/devpoll.hpp",
    "vendor/src/dgram.cpp",
    "vendor/src/dgram.hpp",
    "vendor/src/dish.cpp",
    "vendor/src/dish.hpp",
    "vendor/src/dist.cpp",
    "vendor/src/dist.hpp",
    "vendor/src/encoder.hpp",
    "vendor/src/endpoint.cpp",
    "vendor/src/endpoint.hpp",
    "vendor/src/epoll.cpp",
    "vendor/src/epoll.hpp",
    "vendor/src/err.cpp",
    "vendor/src/err.hpp",
    "vendor/src/fd.hpp",
    "vendor/src/fq.cpp",
    "vendor/src/fq.hpp",
    "vendor/src/gather.cpp",
    "vendor/src/gather.hpp",
    "vendor/src/generic_mtrie.hpp",
    "vendor/src/generic_mtrie_impl.hpp",
    "vendor/src/gssapi_client.cpp",
    "vendor/src/gssapi_client.hpp",
    "vendor/src/gssapi_mechanism_base.cpp",
    "vendor/src/gssapi_mechanism_base.hpp",
    "vendor/src/gssapi_server.cpp",
    "vendor/src/gssapi_server.hpp",
    "vendor/src/i_decoder.hpp",
    "vendor/src/i_encoder.hpp",
    "vendor/src/i_engine.hpp",
    "vendor/src/i_mailbox.hpp",
    "vendor/src/i_poll_events.hpp",
    "vendor/src/io_object.cpp",
    "vendor/src/io_object.hpp",
    "vendor/src/io_thread.cpp",
    "vendor/src/io_thread.hpp",
    "vendor/src/ip.cpp",
    "vendor/src/ip.hpp",
    "vendor/src/ip_resolver.cpp",
    "vendor/src/ip_resolver.hpp",
    "vendor/src/ipc_address.cpp",
    "vendor/src/ipc_address.hpp",
    "vendor/src/ipc_connecter.cpp",
    "vendor/src/ipc_connecter.hpp",
    "vendor/src/kqueue.cpp",
    "vendor/src/kqueue.hpp",
    "vendor/src/lb.cpp",
    "vendor/src/lb.hpp",
    "vendor/src/likely.hpp",
    "vendor/src/macros.hpp",
    "vendor/src/mailbox.cpp",
    "vendor/src/mailbox.hpp",
    "vendor/src/mailbox_safe.cpp",
    "vendor/src/mailbox_safe.hpp",
    "vendor/src/mechanism.cpp",
    "vendor/src/mechanism.hpp",
    "vendor/src/mechanism_base.cpp",
    "vendor/src/mechanism_base.hpp",
    "vendor/src/metadata.cpp",
    "vendor/src/metadata.hpp",
    "vendor/src/msg.cpp",
    "vendor/src/msg.hpp",
    "vendor/src/mtrie.cpp",
    "vendor/src/mtrie.hpp",
    "vendor/src/mutex.hpp",
    "vendor/src/norm_engine.cpp",
    "vendor/src/norm_engine.hpp",
    "vendor/src/null_mechanism.cpp",
    "vendor/src/null_mechanism.hpp",
    "vendor/src/object.cpp",
    "vendor/src/object.hpp",
    "vendor/src/options.cpp",
    "vendor/src/options.hpp",
    "vendor/src/own.cpp",
    "vendor/src/own.hpp",
    "vendor/src/pair.cpp",
    "vendor/src/pair.hpp",
    "vendor/src/peer.cpp",
    "vendor/src/peer.hpp",
    "vendor/src/pgm_receiver.cpp",
    "vendor/src/pgm_receiver.hpp",
    "vendor/src/pgm_sender.cpp",
    "vendor/src/pgm_sender.hpp",
    "vendor/src/pgm_socket.cpp",
    "vendor/src/pgm_socket.hpp",
    "vendor/src/pipe.cpp",
    "vendor/src/pipe.hpp",
    "vendor/src/plain_client.cpp",
    "vendor/src/plain_client.hpp",
    "vendor/src/plain_common.hpp",
    "vendor/src/plain_server.cpp",
    "vendor/src/plain_server.hpp",
    "vendor/src/poll.cpp",
    "vendor/src/poll.hpp",
    "vendor/src/poller.hpp",
    "vendor/src/poller_base.cpp",
    "vendor/src/poller_base.hpp",
    "vendor/src/polling_util.cpp",
    "vendor/src/polling_util.hpp",
    "vendor/src/pollset.cpp",
    "vendor/src/pollset.hpp",
    "vendor/src/precompiled.cpp",
    "vendor/src/precompiled.hpp",
    "vendor/src/proxy.cpp",
    "vendor/src/proxy.hpp",
    "vendor/src/pub.cpp",
    "vendor/src/pub.hpp",
    "vendor/src/pull.cpp",
    "vendor/src/pull.hpp",
    "vendor/src/push.cpp",
    "vendor/src/push.hpp",
    "vendor/src/radio.cpp",
    "vendor/src/radio.hpp",
    "vendor/src/radix_tree.cpp",
    "vendor/src/radix_tree.hpp",
    "vendor/src/random.cpp",
    "vendor/src/random.hpp",
    "vendor/src/raw_decoder.cpp",
    "vendor/src/raw_decoder.hpp",
    "vendor/src/raw_encoder.cpp",
    "vendor/src/raw_encoder.hpp",
    "vendor/src/raw_engine.cpp",
    "vendor/src/raw_engine.hpp",
    "vendor/src/reaper.cpp",
    "vendor/src/reaper.hpp",
    "vendor/src/rep.cpp",
    "vendor/src/rep.hpp",
    "vendor/src/req.cpp",
    "vendor/src/req.hpp",
    "vendor/src/router.cpp",
    "vendor/src/router.hpp",
    "vendor/src/scatter.cpp",
    "vendor/src/scatter.hpp",
    "vendor/src/secure_allocator.hpp",
    "vendor/src/select.cpp",
    "vendor/src/select.hpp",
    "vendor/src/server.cpp",
    "vendor/src/server.hpp",
    "vendor/src/session_base.cpp",
    "vendor/src/session_base.hpp",
    "vendor/src/signaler.cpp",
    "vendor/src/signaler.hpp",
    "vendor/src/socket_base.cpp",
    "vendor/src/socket_base.hpp",
    "vendor/src/socket_poller.cpp",
    "vendor/src/socket_poller.hpp",
    "vendor/src/socks.cpp",
    "vendor/src/socks.hpp",
    "vendor/src/socks_connecter.cpp",
    "vendor/src/socks_connecter.hpp",
    "vendor/src/stdint.hpp",
    "vendor/src/stream.cpp",
    "vendor/src/stream.hpp",
    "vendor/src/stream_connecter_base.cpp",
    "vendor/src/stream_connecter_base.hpp",
    "vendor/src/stream_engine_base.cpp",
    "vendor/src/stream_engine_base.hpp",
    "vendor/src/stream_listener_base.cpp",
    "vendor/src/stream_listener_base.hpp",
    "vendor/src/sub.cpp",
    "vendor/src/sub.hpp",
    "vendor/src/tcp.cpp",
    "vendor/src/tcp.hpp",
    "vendor/src/tcp_address.cpp",
    "vendor/src/tcp_address.hpp",
    "vendor/src/tcp_connecter.cpp",
    "vendor/src/tcp_connecter.hpp",
    "vendor/src/tcp_listener.cpp",
    "vendor/src/tcp_listener.hpp",
    "vendor/src/thread.cpp",
    "vendor/src/thread.hpp",
    "vendor/src/timers.cpp",
    "vendor/src/timers.hpp",
    "vendor/src/tipc_address.cpp",
    "vendor/src/tipc_address.hpp",
    "vendor/src/tipc_connecter.cpp",
    "vendor/src/tipc_connecter.hpp",
    "vendor/src/tipc_listener.cpp",
    "vendor/src/tipc_listener.hpp",
    "vendor/src/trie.cpp",
    "vendor/src/trie.hpp",
    "vendor/src/tweetnacl.c",
    "vendor/src/tweetnacl.h",
    "vendor/src/udp_address.cpp",
    "vendor/src/udp_address.hpp",
    "vendor/src/udp_engine.cpp",
    "vendor/src/udp_engine.hpp",
    "vendor/src/v1_decoder.cpp",
    "vendor/src/v1_decoder.hpp",
    "vendor/src/v1_encoder.cpp",
    "vendor/src/v1_encoder.hpp",
    "vendor/src/v2_decoder.cpp",
    "vendor/src/v2_decoder.hpp",
    "vendor/src/v2_encoder.cpp",
    "vendor/src/v2_encoder.hpp",
    "vendor/src/v2_protocol.hpp",
    "vendor/src/v3_1_encoder.cpp",
    "vendor/src/v3_1_encoder.hpp",
    "vendor/src/vmci.cpp",
    "vendor/src/vmci.hpp",
    "vendor/src/vmci_address.cpp",
    "vendor/src/vmci_address.hpp",
    "vendor/src/vmci_connecter.cpp",
    "vendor/src/vmci_connecter.hpp",
    "vendor/src/vmci_listener.cpp",
    "vendor/src/vmci_listener.hpp",
    "vendor/src/windows.hpp",
    "vendor/src/wire.hpp",
    "vendor/src/ws_address.cpp",
    "vendor/src/ws_address.hpp",
    "vendor/src/ws_decoder.cpp",
    "vendor/src/ws_decoder.hpp",
    "vendor/src/ws_encoder.cpp",
    "vendor/src/ws_encoder.hpp",
    "vendor/src/ws_engine.cpp",
    "vendor/src/ws_engine.hpp",
    "vendor/src/ws_listener.cpp",
    "vendor/src/ws_listener.hpp",
    "vendor/src/ws_protocol.hpp",
    "vendor/src/wss_address.cpp",
    "vendor/src/wss_address.hpp",
    "vendor/src/xpub.cpp",
    "vendor/src/xpub.hpp",
    "vendor/src/xsub.cpp",
    "vendor/src/xsub.hpp",
    "vendor/src/ypipe.hpp",
    "vendor/src/ypipe_base.hpp",
    "vendor/src/ypipe_conflate.hpp",
    "vendor/src/yqueue.hpp",
    "vendor/src/zap_client.cpp",
    "vendor/src/zap_client.hpp",
    "vendor/src/zmq.cpp",
    "vendor/src/zmq_draft.h",
    "vendor/src/zmq_utils.cpp",
    "vendor/src/zmtp_engine.cpp",
    "vendor/src/zmtp_engine.hpp",
  ]

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [
    "//build/config/compiler:no_chromium_code",
    "//build/config/compiler:exceptions",
    ":libzmq_config_private",
  ]

  public_configs = [ ":libzmq_config_public" ]

  include_dirs = [
    "vendor/include",
    "vendor/src",
  ]

  if (is_win) {
    include_dirs += [ "win" ]
    if (!zmq_use_select) {
      sources += [
        "vendor/external/wepoll/wepoll.c",
        "vendor/external/wepoll/wepoll.h",
      ]
    }
  }

  if (is_mac) {
    include_dirs += [ "mac" ]
  }

  if (!zmq_use_select) {
    sources += [
      "vendor/src/ipc_listener.cpp",
      "vendor/src/ipc_listener.hpp",
    ]
  }
}
